
( let's define some words ("functions") and use the stack-manipulation notation
in comments, like ( a b -- c d ) )

: dup       0i PICK       ( a -- a a )   ;

( we just defined `dup` (!) which duplicates the top stack element. in the
comment you see ( a -- a a ) which means: before `dup` you have "a" and after
you have "a a". so `6 dup` ( 6 -- 6 6 ) would be like typing `6 6`. the word's
"body" itself contains `0i PICK`; this is the code that gets executed when you
type "dup"; it calls the PICK word with 0i as argument (integer literal 0).
this "picks" (without removing anything) the 0th (top) element from top of the
stack, and pushes it onto the stack. `dup` is "borrowed" from Forth which this
language is heavily inspired by. another borrored word is `over`: )

: over      1i PICK     ( a x -- a x a ) ;

( about `PICK` vs `pick`: the UPPERCASE words are typically "internal words",
and/or words that are, uh, picky with their arguments. if PICK was called with
1 or 1.0 (both floating-point) instead of 1i (integer), it would be bitwise
cast ("reinterpret cast") to an integer which would be like typing `1 VAL_INT
cast` (which resolves to 1065353216i on my end). the typesafe lowercase `pick`
is defined later when we have bootstrapped enough to define `i32` )


( `<n> <d> ROTATE` "rotates" the <n> topmost stack elements <d> steps to the
left. negative <d> to the right )

: swap  2i  1i ROTATE   ( a b -- b a )   ;
: rot   3i  1i ROTATE ( a b c -- b c a ) ;
: tro   3i -1i ROTATE ( a b c -- c a b ) ;

: dup2     ( a b -- a b a b )
  swap dup ( a b -- b a a )
  rot dup  ( ... -- a a b b )
  tro      ( ... -- a b a b )
;


( uh-oh comptime )

comptime : IF
  there           ( -- p0)
  -1i SEW-JMP0    ( forward JMP0 placeholder; targets `THEN`)
;

( `IF` (a precursor to `if`) inserts a placeholder JMP0 instruction into the
code at compile-time that is meant to jump to `THEN` when the value popped from
the stack by `JMP0` is zero (either float or int). but since we don't have the
address yet, we write -1i as placeholder address. inside the comptime
(compile-time) VM the address before `JMP0` is pushed (p0). this tells `THEN`
where to write the correct jump address. )

comptime : THEN
  there there rot ( p0 -- t0 t0 p0 )
  navigate  ( t0 t0 p0 -- t0 t0 )  ( set write cursor to p0 )
  SEW-ADDR     ( t0 t0 -- t0 )     ( write t0 as address in IF's JMP0 )
  navigate        ( t0 -- )        ( restore write cursor )
;
( `THEN` patches the correct jump address into the placeholder JMP0 in `IF`. )


( we now have enough language to define `f32` and `i32` which converts input to
those types respectively. )

: f32 ( x -- f32(x) e.g. ( 5i -- 5 ) and ( 6 -- 6) )
  dup typeof VAL_FLOAT I= IF     return THEN
  dup typeof VAL_INT   I= IF I>F return THEN
  "input is not int/float" halt
;

: i32 ( i -- i32(i) e.g. ( 7 -- 7i ) and ( 8 -- 8 ) )
  dup typeof VAL_INT   I= IF     return THEN
  dup typeof VAL_FLOAT I= IF F>I return THEN
  "input is not int/float" halt
;

( `i32` allows us to define a less picky `PICK` that also works on
floating-point numbers: )

: pick   i32 PICK ;

( and so on )

: roll        i32  1i ROTATE ; ( rotate n stack elements one step left  )
: llor        i32 -1i ROTATE ; ( rotate n stack elements one step right )

: strcomps    i32 STRCOMPS ; ( string index -- codepoint rgbx )
: strnew      i32 STRNEW   ; ( n√ó[codepoint rgbx] n -- string )
: strcatn     i32 STRCATN  ; ( concat n strings on stack ( ... n -- str ) )

: set-global  i32 SET-GLOBAL ; ( value index -- ) (sets global[index]=value)
: get-global  i32 GET-GLOBAL ; ( index -- global[index] )


: BOX-i32 (i:i32 T -- T(i))
  swap dup typeof VAL_INT I!= IF
    "box input not i32" halt
  THEN
  swap CAST
;



comptime : if
  there           ( -- p0)
  -1i SEW-JMP0    ( forward JMP0 placeholder; targets `else` or `then` )
  (IF box        ( p0 -- p0:IF) )
;

comptime : else
  ( IF unbox          ( p0:IF -- p0) )
  there                ( p0 -- p0 p1 )
  -1i SEW-JMP    ( forward JMP placeholder, targets then )
  there               ( ... -- p0 p1 p2 )
  rot navigate dup    ( ... -- p1 p2 p2)
  SEW-ADDR            ( ... -- p1 p2)
  navigate            ( ... -- p1 )
  ( IF box               ( p1 -- p1:IF) )
;

comptime : then
  ( IF unbox     (p1:IF -- p1) )
  there there rot ( p1 -- t1 t1 p1 )
  navigate  ( t1 t1 p1 -- t1 t1 )
  SEW-ADDR     ( t1 t1 -- t1 )
  navigate        ( t1 -- )
;


: assert if else halt then ;

: assert-i32 ( i -- )
  typeof VAL_INT I= assert
;

: cast   dup assert-i32 CAST ;
comptime : jmpi  <# i32 JMPI #> ;
: jsri   i32 JSRI ;
comptime : call  <# dup assert-i32 JSRI #>  ;
: arrget   i32 ARRGET ;
: arrset   swap i32 swap ARRSET ;
: arrsplit i32 ARRSPLIT ;


: box-i32 (i:i32 T -- T(i))
  swap dup assert-i32
  swap CAST
;

: unbox-i32 (T(i) T -- i:i32)
  swap dup typeof ( .. -- T T(i) typeof(T(i)) )
  rot I= assert
  VAL_INT CAST
;



: $NEXT_GLOBAL 0i ;

( initialize comptime vm )
comptime : _init_comptime0
  0i  $NEXT_GLOBAL  SET-GLOBAL
; _init_comptime0

( comptime allocate next global index )
comptime : ALLOC-STATIC-GLOBAL
  $NEXT_GLOBAL  GET-GLOBAL (   -- I )
  dup 1i I+   ( .. -- I (I+1) )
  $NEXT_GLOBAL  SET-GLOBAL ( .. -- I )
  SEW-LIT
;

: $NULL ALLOC-STATIC-GLOBAL ;
: $ERROR-MESSAGE ALLOC-STATIC-GLOBAL ;


: overload-binop  (fn T0 T1 table-gid -- )
  get-global 4i -1i ROTATE (.. -- table fn T0 T1 )
  dup2 assert-i32 assert-i32
  swap CAST (.. -- table fn key)
  swap
  mapset (table key value -- table)
  drop
;

: dispatch-binop (a b table-gid -- op(a,b))
  ( TODO faster version? )
  get-global (a b table-gid -- a b table)
  tro (-- table a b)
  dup2 typeof swap typeof CAST (-- table a b TK(a,b))
  4i 1i ROTATE ( -- a b TK(a,b) table)
  swap mapget call
;

: $+OVERLOAD ALLOC-STATIC-GLOBAL ;
mapnew $+OVERLOAD set-global
: overload+   (fn T0 T1 -- ) $+OVERLOAD overload-binop ;
:-> I+          ;  VAL_INT    VAL_INT    overload+
:-> F+          ;  VAL_FLOAT  VAL_FLOAT  overload+
:-> f32 F+      ;  VAL_FLOAT  VAL_INT    overload+
:-> swap f32 F+ ;  VAL_INT    VAL_FLOAT  overload+
: + $+OVERLOAD dispatch-binop ;

: $*OVERLOAD ALLOC-STATIC-GLOBAL ;
mapnew $*OVERLOAD set-global
: overload*   (fn T0 T1 -- ) $*OVERLOAD overload-binop ;
:-> I*          ;  VAL_INT    VAL_INT    overload*
:-> F*          ;  VAL_FLOAT  VAL_FLOAT  overload*
:-> f32 F*      ;  VAL_FLOAT  VAL_INT    overload*
:-> swap f32 F* ;  VAL_INT    VAL_FLOAT  overload*
: * $*OVERLOAD dispatch-binop ;

