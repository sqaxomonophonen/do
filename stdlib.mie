
: dup       0i PICK       ( a -- a a )   ;
: over      1i PICK     ( a x -- a x a ) ;
: swap  2i  1i ROTATE   ( a b -- b a )   ;
: rot   3i  1i ROTATE ( a b c -- b c a ) ;
: tro   3i -1i ROTATE ( a b c -- c a b ) ;
: ROLL      1i ROTATE ;
: LORR     -1i ROTATE ;

: dup2 ( a b -- a b a b )
	swap dup ( .. -- b a a )
	rot dup  ( .. -- a a b b )
	tro      ( .. -- a b a b )
;

comptime : if
  there           ( -- p0)
  -1i SEW-JMP0    ( forward JMP0 placeholder; targets `else` or `then` )
  (IF box        ( p0 -- p0:IF) )
;

comptime : else
  ( IF unbox          ( p0:IF -- p0) )
  there                ( p0 -- p0 p1 )
  -1i SEW-JMP    ( forward JMP placeholder, targets then )
  there               ( ... -- p0 p1 p2 )
  rot navigate dup    ( ... -- p1 p2 p2)
  SEW-ADDR            ( ... -- p1 p2)
  navigate            ( ... -- p1 )
  ( IF box               ( p1 -- p1:IF) )
;

comptime : then
  ( IF unbox     (p1:IF -- p1) )
  there there rot ( p1 -- t1 t1 p1 )
  navigate  ( t1 t1 p1 -- t1 t1 )
  SEW-ADDR     ( t1 t1 -- t1 )
  navigate        ( t1 -- )
;

: f32
	dup typeof VAL_FLOAT I= if     return then
	dup typeof VAL_INT   I= if I>F return then
	halt ( TODO error message )
;

: i32
	dup typeof VAL_INT   I= if     return then
	dup typeof VAL_FLOAT I= if F>I return then
	halt ( TODO error message )
;

: set-global i32 SET-GLOBAL ;
: get-global i32 GET-GLOBAL ;

: assert if else halt then ;

: assert-i32 ( i -- )
	typeof VAL_INT I= assert
;

: pick   i32 PICK ;
: roll   i32 ROLL ;
: lorr   i32 LORR ;
: cast   dup assert-i32 CAST ;
comptime : jmpi  <# i32 JMPI #> ;
: jsri   i32 JSRI ;
comptime : call  <# i32 JSRI #>  ;
: arrget   i32 ARRGET ;
: arrset   swap i32 swap ARRSET ;
: arrsplit i32 ARRSPLIT ;


: box-i32 (i:i32 T -- T(i))
	swap dup assert-i32
	swap CAST
;

: unbox-i32 (T(i) T -- i:i32)
	swap dup typeof ( .. -- T T(i) typeof(T(i)) )
	rot I= assert
	VAL_INT CAST
;

: $NEXT_GLOBAL 0i ;

( initialize comptime vm )
comptime : _init_comptime0
  0i  $NEXT_GLOBAL  SET-GLOBAL
; _init_comptime0

( comptime allocate next global index )
comptime : ALLOC-STATIC-GLOBAL
  $NEXT_GLOBAL  GET-GLOBAL (   -- I )
  dup 1i I+   ( .. -- I (I+1) )
  $NEXT_GLOBAL  SET-GLOBAL ( .. -- I )
  SEW-LIT
;

: $NULL ALLOC-STATIC-GLOBAL ;
: $ERROR-MESSAGE ALLOC-STATIC-GLOBAL ;
: $+OVERLOAD ALLOC-STATIC-GLOBAL ;

: overload-binop  (fn T0 T1 table-gid -- )
	get-global 4i -1i ROTATE (.. -- table fn T0 T1 )
	dup2 assert-i32 assert-i32
	swap CAST (.. -- table fn key)
	swap
	mapset (table key value -- table)
	drop
;

: dispatch-binop (a b table-gid -- op(a,b))
	get-global (a b table-gid -- a b table)
	tro (-- table a b)
	dup2 typeof swap typeof CAST (-- table a b TK(a,b))
	4i 1i ROTATE ( -- a b TK(a,b) table)
	swap mapget call
;

mapnew $+OVERLOAD set-global

: overload+   (fn T0 T1 -- ) $+OVERLOAD overload-binop ;
:-> I+               ;  VAL_INT    VAL_INT    overload+
:-> F+               ;  VAL_FLOAT  VAL_FLOAT  overload+
:-> f32 F+           ;  VAL_FLOAT  VAL_INT    overload+
:-> swap f32 swap F+ ;  VAL_INT    VAL_FLOAT  overload+

: + $+OVERLOAD dispatch-binop ;

1.1 2.2 +
1i 2i +
3.1415 10i +
20i 3.1415 +

