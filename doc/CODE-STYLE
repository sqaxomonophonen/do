 - If you use dynamic arrays from stb_ds.h, name them like "int* id_arr"
   instead of "int* ids"; that is, add an `_arr`-suffix. The reason is that the
   (super-)type is hidden, and it's dangerous to confuse an "int pointer" with
   a "dynamic array of ints".

 - Prefix out/return argument names with `out_`. These are pointer arguments
   used to return multiple/optional values. It should typically be valid to
   pass NULL if you don't want a particular return value.

 - Don't use `typedef` unless a type must be easily replaceable or
   configurable. In particular don't typedef structs, enums, etc.

 - For a function that "returns foo by id": if it panics when called with an id
   that doesn't exist, call it get_foo_by_id(); if it instead returns a nil
   value, call it lookup_foo_by_id()

 - It's hard to be 100% consistent with function argument ordering, but the
   rough guideline is:
   - For "struct methods", the struct type is the first argument, example:
       void foo_set_x(struct foo* foo, int x) {...}
   - For functions that have "sources" and a "destination", place the
     destination before source (like `memcpy(dst,src,n)`)
   - Place "optional" arguments last (arguments that accepts a "nullish" value
     like NULL, -1, etc). This also includes out/return arguments because
     they're typically optional (although this is slightly inconsistent with
     the source/destination rule).

 - Function names that don't sound like a yes/no question, but nevertheless
   return "success" and "error" (integer) values should use >=0 for "success"
   and <0 for "error". Function that sound like a question should use 0 for
   false, and non-0 (typically 1) for true. E.g. read_from_file() doesn't sound
   like yes/no question, but has_file_error() does.
