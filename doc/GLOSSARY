
===============================================================================
WORDS USED INTERNALLY
===============================================================================

: book and fundament
the "book" is collection of documents, written against a "fundament" that tells
Do how to interpret the documents. "mie-urlyd" is the default sound/music
fundament, which combines the "mie" language with the "urlyd" audio engine.

: mim
editor protocol used internally, in journals on disk, and over-the-wire.
loosely inspired by, and named after "vim", but starting with "mi" as in
"do-re-mi" or "minimal".

: scrallox
scratch allocator used in the compiler, VM (in mie.c)

: journal
a data structure, DO_JAM_JOURNAL on disk, that represents a Do-session as a
series of mim-commands. this is the only "source of truth", and snapshots (see
below) are derived from this.

: spool / spooling
processing a sequence of journal entries and applying them to the internal
snapshot state. this happens during startup, during time travel and upon user
input.

: host and peer
like server and client, but I like these names better. but also, a desktop
build that acts as "server" is host and peer at the same time; the host is
basically only responsible for recording a series of events (journal) and
broadcasting them to peers. the peer does all the "fun stuff" (runs mie-code,
audio, etc)

: snapshot
a data structure containing a materialised point-in-time version of a
Do-session. this is derived from mim-commands from the journal or elsewhere.
kinds of snapshots in use:
 - "present snapshot": the host's snapshot; corresponds to the latest state
   according to the journal.
 - "upstream snapshot": the peer's snapshot; corresponds to lhe latest state
   received from the host
 - "fiddle snapshot": used by peer for local edits; it's initialized from the
   upstream snapshot, and edits are then applied (so that the upstream snapshot
   is "undisturbed")

: snapshotcache
snapshotcache.data and snapshotcache.index collectively store snapshots on
disk. these files can be regenerated from the DO_JAM_JOURNAL file.

: wax
random 64-bit number that is used to "seal" a set of files that belong
together; when do closes it generates a new wax value and stores it in these
files; DO_JAM_JOURNAL, and derived files (snapshotcache, activitycache). this
is used to detect "within reasonable doubt" if these files have been carelessly
lumped together, diverged from each other, etc. also, when do opens a set of
files, it clears the wax value to 0 (make_wax() never returns 0).

: cursor vs caret
"caret" is used for your "text editing caret" (also sometimes called a
"cursor"), while "cursor" is used for the rest, like file/read/write cursors.

: colorchar
character consisting of a codepoint and a 4-component splash color (see:
splash4)

: docchar
document char consisting of a colorchar, flags and timestamp.

TODO : strchar? (mie string char, like colorchar but also contains source
location)

: splash4
4-component splash color, each component a decimal digit, like 5050 or 3333.
all valid colors are between 0000 and 9999. the components are RGBX where RGB
are red/green/blue, and X is "shake". the color 3456 is red=3, green=4, blue=5
and shake=6. the original splash (3-component) format was made by Lu Wilson aka
Todepond (https://www.todepond.com/lab/splash/)

: webpack
web/emscripten build of the do application that can be served from the desktop
application. it's built with webpack.bash.

===============================================================================

rule of thumb when coming up with new words:
if it's a unique concept to Do, that holds significant importance, and
especially if you want to be able to easily "track" this concept across the
source code, then choose a <word> that produces an empty or mostly empty
git-grep result:
  $ git grep -ni <word>
example: incorrect scrallox-usage can lead to very ugly bugs, so it's
convenient to easily be able to get a list of every mention by typing
  $ git grep -ni scrallox

